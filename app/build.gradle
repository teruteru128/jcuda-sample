/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.1.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

// Methods to determine the operating system (OS) and architecture (Arch) of the system.
// These strings are used to determine the classifier of the artifact that contains the
// native libaries. For example, when the operating system is "windows" and the 
// architecture is "x86_64", then the classifier will be "windows-x86_64", and thus,
// the JAR file containing the native libraries will be
// jcuda-natives-windows-x86_64-11.0.0.jar
// These methods are taken from 
// https://github.com/jcuda/jcuda/blob/master/JCudaJava/src/main/java/jcuda/LibUtils.java
def static getOsString() {
    String vendor = System.getProperty("java.vendor");
    if ("The Android Project" == vendor) {
        return "android";
    } else {
    String osName = System.getProperty("os.name");
    osName = osName.toLowerCase(Locale.ENGLISH);
    if (osName.startsWith("windows")) {
        return "windows";
    } else if (osName.startsWith("mac os")) {
        return "apple";
    } else if (osName.startsWith("linux")) {
        return "linux";
    } else if (osName.startsWith("sun")) {
        return "sun"
    }
    return "unknown"
    }
}

def static getArchString() {
    String osArch = System.getProperty("os.arch");
    osArch = osArch.toLowerCase(Locale.ENGLISH);
    if ("i386" == osArch || "x86" == osArch || "i686" == osArch) {
    return "x86";
    } else if (osArch.startsWith("amd64") || osArch.startsWith("x86_64")) {
    return "x86_64";
    } else if (osArch.startsWith("arm64")) {
    return "arm64";
    } else if (osArch.startsWith("arm")) {
    return "arm";
    } else if ("ppc" == osArch || "powerpc" == osArch) {
    return "ppc";
    } else if (osArch.startsWith("ppc")) {
    return "ppc_64";
    } else if (osArch.startsWith("sparc")) {
    return "sparc";
    } else if (osArch.startsWith("mips64")) {
    return "mips64";
    } else if (osArch.startsWith("mips")) {
    return "mips";
    } else if (osArch.contains("risc")) {
    return "risc";
    }
    return "unknown";
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1-jre'

    // JCuda dependencies are below

    def classifier = getOsString() + "-" + getArchString()

    // Set JCuda version here, or if multiple modules use JCuda, 
    // you should set a global variable like so:
    //
    // ext {
    //  jCudaVersion = "11.0.0"
    // }
    //
    // In your *top level* build gradle, and use
    // rootProject.ext.jCudaVersion instead of jCudaVersion when you need to access it

    def jCudaVersion = "11.0.0"

    // JCuda Java libraries

    implementation(group: 'org.jcuda', name: 'jcuda', version: jCudaVersion) {
        transitive = false
    }
    implementation(group: 'org.jcuda', name: 'jcublas', version: jCudaVersion) {
        transitive = false
    }
    implementation(group: 'org.jcuda', name: 'jcufft', version: jCudaVersion) {
        transitive = false
    }
    implementation(group: 'org.jcuda', name: 'jcusparse', version: jCudaVersion) {
        transitive = false
    }
    implementation(group: 'org.jcuda', name: 'jcurand', version: jCudaVersion) {
        transitive = false
    }
    implementation(group: 'org.jcuda', name: 'jcusolver', version: jCudaVersion) {
        transitive = false
    }
    implementation(group: 'org.jcuda', name: 'jcudnn', version: jCudaVersion) {
        transitive = false
    }

    // JCuda native libraries

    implementation group: 'org.jcuda', name: 'jcuda-natives',
        classifier: classifier, version: jCudaVersion
    implementation group: 'org.jcuda', name: 'jcublas-natives',
        classifier: classifier, version: jCudaVersion
    implementation group: 'org.jcuda', name: 'jcufft-natives',
        classifier: classifier, version: jCudaVersion
    implementation group: 'org.jcuda', name: 'jcusparse-natives',
        classifier: classifier, version: jCudaVersion
    implementation group: 'org.jcuda', name: 'jcurand-natives',
        classifier: classifier, version: jCudaVersion
    implementation group: 'org.jcuda', name: 'jcusolver-natives',
        classifier: classifier, version: jCudaVersion
    implementation group: 'org.jcuda', name: 'jcudnn-natives',
        classifier: classifier, version: jCudaVersion
}

application {
    // Define the main class for the application.
    mainClass = 'com.twitter.teruteru128.jcuda.sample.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
